An example of how events are formatted:

"my_event"
Values: float, int (0), int, string ("hello")
This event has four values: a float, two ints, and a string. When the event is fired, the first int will always be 0, and the string will always be "hello".
Example users: MyComponent, MyOtherComponent

---

"is_anomalous"
Value: bool (false)
Returns true if the receiving entity has anomalous properties.

"strengthen_anomaly"
Values: PhysicalEntity, float
Strengthen the receiving entity's anomalous effects by the given value.
Example users: EMPattern, StaticPrismAnomaly

"weaken_anomaly"
Values: PhysicalEntity, float
Weaken the receiving entity's anomalous effects by the given value.
Example users: EMPattern, StaticPrismAnomaly

"suppress_pattern"
Values: PhysicalEntity int, bool (false)
Attempt to suppress an anomaly's EM pattern. If this event is called on an anomaly and the int matches that anomaly's pattern type, the bool will return true.
Example users: EMPattern, PatternSuppressor

"should_render_in_hand"
Values: bool (true)
If this returns false, the receiving entity will not appear in the player's hand when held.
Example users: Placeable

"get_dial"
Values: float (0)
Get the dial value of the receiving entity.
Example users: MouseDial

"player_look_start"
values: Player, PhysicalEntity
Called once when the player looks directly at this entity.

"player_look"
values: Player, PhysicalEntity
Called every frame while the player is looking directly at this entity.

"player_look_end"
values: Player, PhysicalEntity
Called when the player looks away from this entity.

"interact"
values: Player, PhysicalEntity
Called when the player is looking at this entity and presses the interact key (E).

"player_use"
values: Player, PhysicalEntity
Called when the player uses this entity. PhysicalEntity is null if the item is being used from the inventory.

"placed_in_hand"
values: Player
Fired when the player selects an entity in their hotbar.

"in_hand"
values: Player, Vector2
Fired every frame while the player is holding the receiving entity as an item. Vector2 argument is the relative mouse motion for this frame.

"removed_from_hand"
values: Player
Fired when the player de-selects an item from their hotbar.

"_process"
Values: float
When a PhysicalEntity's `_process` method is run, this event is fired with the delta time as the value.

"em_probe"
Values: float, float (0)
Probe an entity's electromagnetic radiation at the given frequency and return it in the second value.
Example users: Anomaly, DialDetector

"physicalized"
Values: None
When a PhysicalEntity's `_ready` method is run, it fires the "physical_entity_ready" method at its entity.

"can_contain_items"
Values: bool (false)
Check if the receiving entity is capable of containing items.
Example users: Inventory, UnlimitedItems

"get_item_count"
Values: Entity, int (0)
Count the number of times an entity appears in the receiving entity as an item.
Example users: Inventory

"get_item_counts"
Values: Dictionary[Entity,int]
Count the number of times each entity appears in the receiving entity as an item. Values start at 0.
Example users: Inventory

"try_add_item"
Values: Entity, int
Try to add an entity to the receiving entity a given number of times. This is used by Inventory. The event returns with the number of items that were not successfully added.
Example users: Inventory

"try_remove_item"
Values: Entity, int, int (0)
Try to remove an entity from the receiving entity a given number of times.
Once the event is complete, the first integer is the "outstanding" number of items that were not successfully removed, and the second integer is the number of items that were successfully removed - their sum will always be equal to the value of the first int when the event was fired.
Example users: Inventory

"get_items"
Values: Dictionary[Entity:int] ({})
Get a dictionary of items contained by the receiving entity. Keys are Entities, values are the quantity of that Entity.

"get_energy"
Values: float (0)
Get the amount of energy contained by the receiving entity.
Example users: EnergyContainer

"try_add_energy":
Values: float
Try to add the given amoount of energy to the receiving entity.
Returns with the amount of energy that was not successfully added.
Example users: EnergyContainer

"try_remove_energy"
Values: float, float (0)
Try to remove the given amount of energy from the receiving entity.
Once the event is complete, the first float is the outstanding amount of energy that could not be removed, and the second float is the amount of energy that was removed - their sum will always be equal to the value of the first float when the event was fired.
Example users: EnergyContainer

"geist_possession_start"
Values: float
Fired when a geist starts possessing an entity. First value is the geist's strength.

"geist_possession_end"
Values: float
Fired when a geist leaves a possessed entity. First value is the geist's strength.

"geist_pulse"
Values: float
Fired at semi-random intervals while a geist is possessing this entity. First value is the strength of the pulse.

"can_be_possessed"
Values: bool (false), float
First value when returned indicates whether the object is able to be possessed by a geist. The second value is the strength of the geist in question.

"kill_geist"
Values: bool (false)
Instantly kill any geist in the receiving entity regardless of strength. First value returns true if a geist was killed.
